1
00:00:00,000 --> 00:00:04,380
Unknown: First thing we're going
to be talking about is agile and

2
00:00:04,380 --> 00:00:07,380
iterative project management.
And it helps if I'm on the first

3
00:00:07,380 --> 00:00:12,570
slide rather than this last one.
Let's make that big. Okay, can

4
00:00:12,570 --> 00:00:19,230
you still see? Guys screen? Yay,
fantastic, right? Okay, so we're

5
00:00:19,230 --> 00:00:22,620
just going to talk a bit about
some iterative, project

6
00:00:22,620 --> 00:00:26,370
management's for your project.
So project management workflows

7
00:00:26,610 --> 00:00:31,110
for your project, including ways
to automate that I'm going to

8
00:00:31,110 --> 00:00:33,390
talk a little bit about agile,
but we're not going to touch on

9
00:00:33,390 --> 00:00:36,000
it a whole lot when we're going
to take from the spirit of Agile

10
00:00:36,180 --> 00:00:39,570
Project methodology, then
actually teaching it because

11
00:00:39,570 --> 00:00:43,500
agile itself, and people tend to
pay for days or weeks worth of

12
00:00:43,500 --> 00:00:47,880
courses for agile or project
management. So this is me, you

13
00:00:47,880 --> 00:00:53,250
may have met me before, I'm
fairly mostly live sales. And I,

14
00:00:53,310 --> 00:00:55,800
like I mentioned, I'll be
talking about agile. So that's

15
00:00:55,800 --> 00:00:59,010
actually got a sticky note
background. Because anyone who

16
00:00:59,010 --> 00:01:02,280
has ever worked in a physical
Agile Software team will

17
00:01:02,280 --> 00:01:05,460
probably be familiar, there are
post it notes everywhere, it's a

18
00:01:05,460 --> 00:01:12,600
bit like the carpentries. So
what is agile beyond a word in

19
00:01:12,600 --> 00:01:18,180
English, that means nimble. So
it started in 2001. As a bunch

20
00:01:18,180 --> 00:01:20,970
of people getting together, they
all worked for corporate

21
00:01:20,970 --> 00:01:24,570
software houses. And they were a
bit frustrated with some of the

22
00:01:24,570 --> 00:01:27,930
ways that things were working.
And they wrote a short manifesto

23
00:01:27,930 --> 00:01:31,320
about ways that they wanted
things to get better. I'm not

24
00:01:31,320 --> 00:01:33,270
going to read all of this,
because some of this is very

25
00:01:33,270 --> 00:01:35,820
corporate and software. So most
of us don't necessarily have

26
00:01:35,820 --> 00:01:39,090
customers. And many of our
projects may not be software.

27
00:01:40,050 --> 00:01:42,690
But if you look in the middle of
the big words, individuals and

28
00:01:42,690 --> 00:01:45,690
interactions over processes and
tools was one of their core

29
00:01:45,690 --> 00:01:49,620
values. Another core value, I'll
skip to the bottom of the large

30
00:01:49,620 --> 00:01:53,430
text ones is responding to
change over following a plan.

31
00:01:54,420 --> 00:01:56,880
And perhaps the moral of the
story that I'm trying to get to

32
00:01:56,880 --> 00:02:00,390
here is what they were favoring
world's flexibility and talking

33
00:02:00,390 --> 00:02:03,840
to people and interacting with
people over a really strict rule

34
00:02:03,840 --> 00:02:10,590
bound, project management styles
and behaviors. Or to explain a

35
00:02:10,590 --> 00:02:13,440
bit more what they were pushing
back against when addre was

36
00:02:13,440 --> 00:02:17,370
founded. On the left here, we
have the waterfall methodology,

37
00:02:17,730 --> 00:02:21,090
which is when someone is
designing a software project,

38
00:02:21,840 --> 00:02:25,320
one way that you could do this
as you gather requirements, and

39
00:02:25,320 --> 00:02:28,950
then you move on to designing
based on those requirements. you

40
00:02:28,950 --> 00:02:32,280
implement those requirements.
And then you verify that the

41
00:02:32,280 --> 00:02:35,700
thing that you have implemented
works as according to the

42
00:02:35,700 --> 00:02:39,990
requirements in the original
step. One, one flaw with this is

43
00:02:39,990 --> 00:02:42,420
that you're usually verifying
that it works based on the

44
00:02:42,420 --> 00:02:44,730
requirements and not necessarily
based on what the customer

45
00:02:44,730 --> 00:02:48,780
wants. And it's called waterfall
because it's very rigid, and you

46
00:02:48,780 --> 00:02:51,690
flow from one step and down to
the next step, and you can't go

47
00:02:51,690 --> 00:02:54,870
back. So if this was over a
three year timeline, you might

48
00:02:54,870 --> 00:02:57,660
spend the first six months
gathering requirements, two

49
00:02:57,660 --> 00:03:00,000
years designing and
implementing. And then the final

50
00:03:00,000 --> 00:03:03,600
bit verifying and maintaining.
And part of the problem with

51
00:03:03,600 --> 00:03:09,150
this project. Project Management
management methodology is that

52
00:03:09,180 --> 00:03:12,510
if you didn't do anything,
right, any point like you

53
00:03:12,510 --> 00:03:14,760
misunderstood the requirements,
you couldn't go back, there

54
00:03:14,760 --> 00:03:18,480
wasn't time left in the
schedules and the behaviors. And

55
00:03:18,480 --> 00:03:21,480
it meant that sometimes the
thing that produced was very

56
00:03:21,480 --> 00:03:24,360
much to specifications, but not
necessarily what anyone really

57
00:03:24,360 --> 00:03:30,330
wanted. And so agile pushes back
against that and says we need to

58
00:03:30,330 --> 00:03:33,330
be interacting with people all
the time, we need to be doing

59
00:03:33,330 --> 00:03:36,540
things in small chunks, and it
needs to be iterative. So that's

60
00:03:36,540 --> 00:03:40,140
what the right hand diagram is
here. So if you look at the gray

61
00:03:40,380 --> 00:03:43,410
cubes, we have a backlog, these
are items that are things that

62
00:03:43,410 --> 00:03:47,580
need to be done. And you take
off a small discrete chunk, at

63
00:03:47,580 --> 00:03:51,510
any given time you work on that
task, it might be a day or a

64
00:03:51,510 --> 00:03:54,930
week, or a month worth of tasks.
But once that's done, you then

65
00:03:54,930 --> 00:03:58,680
release it. And the idea is that
at any given time, what you're

66
00:03:58,680 --> 00:04:01,950
releasing is actually a complete
project with just a little bit

67
00:04:01,950 --> 00:04:05,970
more on each time. And then you
also you get feedback from the

68
00:04:05,970 --> 00:04:09,030
people you're working with,
whether that be a customer or an

69
00:04:09,060 --> 00:04:11,730
anon software scenario, it's
more likely to be perhaps your

70
00:04:11,730 --> 00:04:16,020
community or your peers. And
then you pull that back. And so

71
00:04:16,020 --> 00:04:18,270
when you've had feedback, you
you'll end up adding more items

72
00:04:18,270 --> 00:04:21,930
to your backlog. And so it's a
much more circular cycle. And it

73
00:04:21,930 --> 00:04:25,620
means that releases are shorter,
smaller, but they tend to be

74
00:04:25,620 --> 00:04:28,890
what people want, which tends to
work much more nicely.

75
00:04:30,480 --> 00:04:33,150
I just send this up again. So
whilst This was originally a

76
00:04:33,150 --> 00:04:36,030
software development
methodology, it's also really,

77
00:04:36,030 --> 00:04:39,240
really good for project
management in general. And the

78
00:04:39,240 --> 00:04:42,420
idea is you break your work up
into really small chunks, rather

79
00:04:42,420 --> 00:04:45,900
than having a really fixed long
timeline. And I think given that

80
00:04:45,900 --> 00:04:49,740
many people in academia may be
working on short term grants for

81
00:04:49,740 --> 00:04:54,060
the year or three years. And,
again, you can see why perhaps

82
00:04:54,060 --> 00:04:56,910
having something attractive that
you're constantly checking

83
00:04:56,910 --> 00:04:59,550
whether or not you was what you
want over a certain timescale.

84
00:04:59,550 --> 00:05:02,760
It's It's logical to work
iteratively as well in scenarios

85
00:05:02,760 --> 00:05:04,890
where we may be working. So

86
00:05:05,460 --> 00:05:06,390
how might I want

87
00:05:06,390 --> 00:05:10,050
to use this in my project, you
say, so I was really proud of

88
00:05:10,050 --> 00:05:12,840
this little image I found where
it has a big challenge the big

89
00:05:12,840 --> 00:05:17,070
egg full of smaller eggs, just
going for the idea that we have

90
00:05:17,100 --> 00:05:20,490
a large, a large milestone of
some sort, but then you break it

91
00:05:20,490 --> 00:05:23,130
down into the smaller chunks and
the smaller tasks that you might

92
00:05:23,130 --> 00:05:28,800
want to work on. So in this
case, we're calling a large

93
00:05:28,800 --> 00:05:31,950
chunk and milestone, so some
main large goal that you might

94
00:05:31,950 --> 00:05:35,550
be wanting to work on, pick that
milestone and start to break it

95
00:05:35,550 --> 00:05:40,380
down into tiny tasks. And I
would suggest try and get those

96
00:05:40,380 --> 00:05:43,290
tasks to be between one or two
hours to no more than a day or

97
00:05:43,290 --> 00:05:46,650
two. If it's going to be taking
more than a day or two, there's

98
00:05:46,680 --> 00:05:48,930
a good chance that you can't
estimate how long it's really

99
00:05:48,930 --> 00:05:51,360
going to take because it's
comprised of so many different

100
00:05:51,360 --> 00:05:54,090
things that you might be
forgetting some. And that it's

101
00:05:54,090 --> 00:05:57,090
always better to break it down
into smaller tasks until you can

102
00:05:57,120 --> 00:06:01,980
estimate easily how long they're
going to be. So I have a couple

103
00:06:01,980 --> 00:06:05,490
of real world examples of
existing projects broken down

104
00:06:05,490 --> 00:06:10,530
into nice, small tasks. So this
is a project board on GitHub,

105
00:06:10,890 --> 00:06:14,580
that has broken down into
releases. It's a roadmap,

106
00:06:14,610 --> 00:06:18,330
basically, and this is where I
work by the way into mine. And

107
00:06:18,330 --> 00:06:22,110
so it's a biological data
warehouse, which is kind of

108
00:06:22,110 --> 00:06:25,320
irrelevant at this point. But
what I did want to show was that

109
00:06:25,320 --> 00:06:28,830
on the left, we have intimated
4.1 point two, this was the

110
00:06:28,830 --> 00:06:31,800
release plan that we have we
said in January, and you have a

111
00:06:31,800 --> 00:06:35,130
set of tasks. And you can see
each of the tasks actually is

112
00:06:35,130 --> 00:06:37,800
complete, because you can see
the little exclamation mark with

113
00:06:37,800 --> 00:06:42,150
a check mark on the left. And
that one was actually already

114
00:06:42,150 --> 00:06:44,940
been released, which is why all
those tasks are complete. Then

115
00:06:44,940 --> 00:06:48,000
the next one, we have it for
point 1.3. In the next column,

116
00:06:48,000 --> 00:06:50,040
we have some tasks that we think
we're going to release in

117
00:06:50,040 --> 00:06:53,790
February. And as we get further
into future things, get the Vega

118
00:06:53,790 --> 00:06:58,800
and Vega. So into my 4.2 point,
oh, we say spring 2019. This is

119
00:06:58,800 --> 00:07:03,000
a very northern hemisphere
centric, I do apologize. But

120
00:07:03,000 --> 00:07:05,700
again, we're no longer at the
point of months, because we know

121
00:07:05,700 --> 00:07:07,950
that this is bigger, it's harder
for us to estimate because it's

122
00:07:07,950 --> 00:07:10,920
further away. And the final
column on the right, which is

123
00:07:10,920 --> 00:07:13,980
kind of cut off into Mountain
5.0. So far in the future, we

124
00:07:13,980 --> 00:07:16,650
haven't broken it down into many
tasks, and we haven't estimated

125
00:07:16,650 --> 00:07:19,950
when it will be yet. So the
closer something is, the more

126
00:07:19,950 --> 00:07:24,240
granular it should be
effectively. Or here is a

127
00:07:24,240 --> 00:07:27,660
another example. This is the
binder hub for the cheering way.

128
00:07:27,810 --> 00:07:31,710
And one thing I think is really
nice. And this one is that

129
00:07:31,710 --> 00:07:34,380
rather than having the releases
like we had on the previous one

130
00:07:34,380 --> 00:07:38,610
for into mine, we actually have
a set of there's a flow where

131
00:07:38,610 --> 00:07:40,920
tasks can run through. So on the
left, you have tasks that

132
00:07:40,920 --> 00:07:43,890
haven't been done yet and your
to do in the middle, you have

133
00:07:43,890 --> 00:07:45,660
ones that we're currently
working on. And then on the

134
00:07:45,660 --> 00:07:49,080
right, we have tasks that are
already done. And what's really

135
00:07:49,080 --> 00:07:53,640
nifty is that GitHub will
actually take pay attention to

136
00:07:53,640 --> 00:07:56,730
the actions that you're taking
in these tasks, and it will

137
00:07:56,730 --> 00:08:02,400
automatically move them through
the board. So tasks that are in

138
00:08:02,400 --> 00:08:05,460
to do that you begin to work on
will automatically move into in

139
00:08:05,460 --> 00:08:08,070
progress. And when you close a
task, it'll automatically hop

140
00:08:08,070 --> 00:08:11,160
over into done. So it means that
you have a really nice

141
00:08:11,160 --> 00:08:14,400
transparent roadmap for anyone
that they can see what you're

142
00:08:14,400 --> 00:08:17,250
working on. But it's actually
not that much admin work,

143
00:08:17,250 --> 00:08:21,060
because a lot of it is automated
as a nice, sufficient and easy

144
00:08:21,060 --> 00:08:26,010
workflow. And then I've tried to
create an example that is a bit

145
00:08:26,010 --> 00:08:29,070
more hands on to something that
everyone can maybe relate to, if

146
00:08:29,070 --> 00:08:32,610
you have a relatively young
project, then you might be

147
00:08:32,610 --> 00:08:35,670
thinking about a milestone for
you might be how to prepare a

148
00:08:35,670 --> 00:08:39,810
website for my project. And so
I've broken that down into two

149
00:08:39,810 --> 00:08:42,540
possible tasks. One would be
domain names, I want to get a

150
00:08:42,540 --> 00:08:46,260
domain name for my project. On
the right hand, I have to create

151
00:08:46,260 --> 00:08:51,270
the content for my website. And
then since those are also kind

152
00:08:51,270 --> 00:08:54,120
of vague, I break those down
further. So domain names, I say,

153
00:08:54,120 --> 00:08:57,120
let's agree on a domain name
with my team members, purchase

154
00:08:57,120 --> 00:09:00,030
that domain name and then set it
up on GitHub. Since we'll be

155
00:09:00,030 --> 00:09:02,910
using GitHub to host your
website. Oops, I went too far.

156
00:09:03,480 --> 00:09:06,780
And on the right, I've broken it
down into ways to create content

157
00:09:07,110 --> 00:09:11,280
for my website. And then in
scenarios where the task was too

158
00:09:11,280 --> 00:09:14,130
vague, like right in about page,
I've also broken it down

159
00:09:14,130 --> 00:09:17,550
together by those emails,
pictures. And so each time when

160
00:09:17,550 --> 00:09:20,130
the task looks larger, break it
down into a smaller size.

161
00:09:21,450 --> 00:09:25,470
And then I've also set up a demo
project board on GitHub so that

162
00:09:25,470 --> 00:09:29,850
you can actually see some of the
automation. So can you see my

163
00:09:29,880 --> 00:09:32,280
GitHub screen as it's done
slides? configure help.

164
00:09:32,520 --> 00:09:36,720
Fantastic. Okay, so these are
the same tasks that I had shown

165
00:09:36,720 --> 00:09:41,250
in the slides. And I close this
task earlier, I said, we've

166
00:09:41,250 --> 00:09:44,280
already agreed on a domain name.
We can click on that. You see,

167
00:09:44,280 --> 00:09:48,120
we've got let's use open ai.org
for our website. We agreed on

168
00:09:48,120 --> 00:09:50,550
that. When I closed it, it
automatically got merged into

169
00:09:50,550 --> 00:09:54,450
the done column. So let's say
there now I have actually just

170
00:09:54,450 --> 00:09:58,080
purchased it, and I think Well,
that seems good. I'm going to

171
00:09:58,080 --> 00:10:01,710
close it now so that I can just
go To move this the other way,

172
00:10:02,220 --> 00:10:05,250
okay, yes, I'm going to close
this issue since we've now

173
00:10:05,250 --> 00:10:10,530
purchased a domain name. So I've
clicked on it, I'm gonna say, I

174
00:10:10,530 --> 00:10:18,060
purchased this. And now when I
close and comment, if I go back

175
00:10:18,060 --> 00:10:21,840
to the board, you can see that
that has automatically moves to

176
00:10:21,840 --> 00:10:26,160
the done column. So it becomes
very effective and easy way to

177
00:10:26,160 --> 00:10:29,310
actually automate some of the
task workflows that you've been

178
00:10:29,310 --> 00:10:31,920
working on when it's broken down
very efficiently and cleanly

179
00:10:31,920 --> 00:10:40,560
like this. And the other thing,
I will show two more things. One

180
00:10:40,560 --> 00:10:43,950
is if you add tasks, you can
create issues on GitHub, like

181
00:10:43,950 --> 00:10:47,010
normal. So these are just normal
GitHub issues. So if I go to my

182
00:10:47,010 --> 00:10:51,480
issues, here, you can see, these
are all my issues. And these

183
00:10:51,480 --> 00:10:55,170
are, for example, convert buyers
to markdown. It's exactly the

184
00:10:55,170 --> 00:11:04,140
same one is in here, and further
down. Oh, no, it's not there.

185
00:11:04,170 --> 00:11:07,890
Haha. Okay, it can be. So I've
clicked add cards in the top

186
00:11:07,890 --> 00:11:10,290
right. And I can literally just
drag that in and say that still

187
00:11:10,290 --> 00:11:14,250
to do. And you can also drag
cards between these columns

188
00:11:14,250 --> 00:11:17,250
manually if for some reason that
you feel like that's necessary

189
00:11:17,250 --> 00:11:22,140
as well. And you can also see
here, there's a tracking bar up

190
00:11:22,140 --> 00:11:25,170
on the top left with the purple
and the green gives us an idea

191
00:11:25,170 --> 00:11:27,630
which which how many tasks are
done, how many are in progress,

192
00:11:27,630 --> 00:11:30,840
and how many are still to do. So
it's a nice effective way to

193
00:11:30,840 --> 00:11:37,650
actually manage your projects in
a public and efficient way. And

194
00:11:37,740 --> 00:11:40,650
that's as much of a demo with
our ad. Now, I know, I'll add

195
00:11:40,650 --> 00:11:43,110
one more thing. So if something
for some reason, you don't want

196
00:11:43,110 --> 00:11:46,020
to make an issue, let's say it's
it's not formal enough, or it's

197
00:11:46,020 --> 00:11:48,300
not defined enough to make an
issue, clearly, you can just add

198
00:11:48,300 --> 00:11:52,350
quick to do notes here. So let's
say I want to add a contact, I'm

199
00:11:52,350 --> 00:11:56,910
typing it wrong. There we go add
a contact page. And that's just

200
00:11:56,910 --> 00:12:00,930
using the class on the top
right, adding a note. So you can

201
00:12:00,930 --> 00:12:05,790
see that is slightly different
from the others. Where is it

202
00:12:05,790 --> 00:12:09,480
gone? There we go. So that's not
actually an issue. But that

203
00:12:09,480 --> 00:12:11,580
means it doesn't appear on the
issues if for some reason, I

204
00:12:11,580 --> 00:12:13,740
don't want it to but then if I
wanted to convert it to an

205
00:12:13,740 --> 00:12:18,360
issue, I could do so as well.
Now it will appear here, so

206
00:12:18,360 --> 00:12:21,510
should be seven in the issues
now. Yeah. So it's a nice way to

207
00:12:21,510 --> 00:12:25,470
manage your tasks. So that's all
I'll go into for this. But at

208
00:12:25,530 --> 00:12:29,400
the minute, if any of that
interested you. I haven't

209
00:12:29,400 --> 00:12:32,220
touched all that much on agile
methodologies. But there are a

210
00:12:32,220 --> 00:12:35,250
lot of different things that you
can learn. So one agile

211
00:12:35,250 --> 00:12:41,130
methodology is Scrum. And this
has a lot of ceremonies and a

212
00:12:41,130 --> 00:12:44,430
lot of formality, which seems
ironic given that, actually

213
00:12:44,520 --> 00:12:48,990
agile talked a lot about not not
having processes. Extreme

214
00:12:48,990 --> 00:12:52,260
Programming is another agile
methodology, Ken Ben is actually

215
00:12:52,260 --> 00:12:56,250
the methodology where he served
those boards, the project was

216
00:12:56,250 --> 00:12:58,860
removing things from to do to
Dan and so on. That is actually

217
00:12:58,860 --> 00:13:01,650
the campaign methodology. But
you can read more about that as

218
00:13:01,650 --> 00:13:04,680
well. We also have a link to
interactive interacts or

219
00:13:04,710 --> 00:13:09,600
iterative interaction design. So
UX user experience design tends

220
00:13:09,600 --> 00:13:13,350
to use a similar iterative
looping back process. So if you

221
00:13:13,350 --> 00:13:15,870
care about how people enjoy
working on your project, it's

222
00:13:15,870 --> 00:13:19,140
definitely worth a bit of a read
of that. I've added a few bits

223
00:13:19,140 --> 00:13:22,620
of the Agile glossary, some of
their jargon that use there's a

224
00:13:22,620 --> 00:13:27,000
lot of jargon and in Agile, I
could probably have five or six

225
00:13:27,000 --> 00:13:29,190
slides comfortably just covering
that, but those are some of the

226
00:13:29,190 --> 00:13:34,350
ones that you're most likely to
encounter. And Thoreau, Harriet,

227
00:13:34,350 --> 00:13:36,900
who's also a software
Sustainability Institute fellow

228
00:13:36,900 --> 00:13:40,920
has an interesting projects to
get more agile into academia. So

229
00:13:40,920 --> 00:13:44,010
there's an interesting blog post
you shared here. And finally, we

230
00:13:44,010 --> 00:13:46,680
have some more notes about
GitHub project automation, if

231
00:13:46,680 --> 00:13:47,850
that's of interest to anyone,

232
00:13:48,060 --> 00:13:48,180
so

